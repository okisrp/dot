#!/usr/bin/env bash

#/	NAME:
#/		The title of the script
#/
#/	DESCRIPTION:
#/		Descript what the script does in detail.
#/
#/	SYNOPSIS:
#/		temp [--help]
#/
#/	OPTIONS:
#/		--help:
#/			Display help message.

: 'These lines only show up with verbose mode enabled.'
: ': is an alias for true which is boolean value.'
: 'BASH STRICT MODE:'
: '-x - Turn on verbose mode. Use it for debugging.'
: '-e - Turn on error mode. If any command return anything except 0 status code'
: 'it will exit the script.'
: '-u - Make the script to print out variables that do not exist.'
: '-o pipefail - Make the whole pipeline fail if anything inside of it fails.'
set -euo pipefail

trap 'echo "Script failed at line $LINENO"' ERR
trap 'echo "
Interapt signal received" && exit 2' SIGINT

LOGFILE=install.log

log() {
	case $1 in
		ERROR|error)
			shift
			printf "\033[1;31m[!] ERROR:::\033[0m %b\n" "$@"
			;;
		INFO|info)
			shift
			printf "\033[1;34m[+] INFO:::\033[0m %b\n" "$@"
			;;
		WARN|warn)
			shift
			printf "\033[1;33m[!] WARN:::\033[0m %b\n" "$@"
			;;
		*)
			printf "\033[1;34m[+] INFO:::\033[0m %b\n" "$@"
			;;
	esac
}

OPTS=$(getopt -ao 'h' -l 'help' -- "$@")

# Not sure if you need this while having error mode enabled.
if [[ $? -ne 0 ]]; then
	log ERROR 'Terminatingâ€¦' >&2
	exit 1
fi

eval set -- "$OPTS"
unset OPTS

while true; do
	case $1 in
		-h|--help)
			grep '^#/' < "$0" | cut -c 4- | less +g
			exit 0
			;;
		--)
			shift
			break
			;;
		*)
			log ERROR "Unknown parameter passed: $1" >&2
			exit 2
			;;
	esac
done

if test -t 0; then
	log WARN 'Before running the script look at: its internals or run it with -h option (Better to do both.)'
	read -rp "Do you want to proceed? [y/N] " RESPONSE

	if [[ "$RESPONSE" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
		log INFO 'You have consented to it by yourself.'
	else
		log ERROR "The script won't do without your permission." >&2
		exit 126
	fi
else
	log ERROR "You have to launch the script interactively." >> $LOGFILE
	exit 1
fi
